"use strict";
// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file aserto/authorizer/v2/api/decision_logs.proto (package aserto.authorizer.v2.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.DecisionPolicy = exports.DecisionUser = exports.Decision = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const identity_context_pb_js_1 = require("./identity_context_pb.js");
const policy_context_pb_js_1 = require("./policy_context_pb.js");
const policy_instance_pb_js_1 = require("./policy_instance_pb.js");
/**
 * represents a decision that an authorizer performed in the past
 *
 * @generated from message aserto.authorizer.v2.api.Decision
 */
class Decision extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * unique id, replay a decision starting with this, also useful to de-dup
         *
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * Policy path used in decision
         *
         * @generated from field: string path = 3;
         */
        this.path = "";
        /**
         * outcome of the decisions specified in the policy context
         *
         * @generated from field: map<string, bool> outcomes = 6;
         */
        this.outcomes = {};
        /**
         * annotations that may be added to a decision
         *
         * @generated from field: map<string, string> annotations = 8;
         */
        this.annotations = {};
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Decision().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Decision().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Decision().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Decision, a, b);
    }
}
exports.Decision = Decision;
Decision.runtime = protobuf_1.proto3;
Decision.typeName = "aserto.authorizer.v2.api.Decision";
Decision.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: protobuf_1.Timestamp },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "message", T: DecisionUser },
    { no: 5, name: "policy", kind: "message", T: DecisionPolicy },
    { no: 6, name: "outcomes", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 8 /* ScalarType.BOOL */ } },
    { no: 7, name: "resource", kind: "message", T: protobuf_1.Struct },
    { no: 8, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 9 /* ScalarType.STRING */ } },
    { no: 9, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
]);
/**
 * information about a user on behalf of whom a decision was made
 *
 * @generated from message aserto.authorizer.v2.api.DecisionUser
 */
class DecisionUser extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * id of the user the identity resolved to
         *
         * @generated from field: string id = 2;
         */
        this.id = "";
        /**
         * convinience human-readable identifier
         *
         * @generated from field: string email = 3;
         */
        this.email = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DecisionUser().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DecisionUser().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DecisionUser().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DecisionUser, a, b);
    }
}
exports.DecisionUser = DecisionUser;
DecisionUser.runtime = protobuf_1.proto3;
DecisionUser.typeName = "aserto.authorizer.v2.api.DecisionUser";
DecisionUser.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "message", T: identity_context_pb_js_1.IdentityContext },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 * information about a policy used in a decision
 *
 * @generated from message aserto.authorizer.v2.api.DecisionPolicy
 */
class DecisionPolicy extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * registry service where policy was retrieved from (e.g. opcr.io)
         *
         * @generated from field: string registry_service = 2;
         */
        this.registryService = "";
        /**
         * image of the policy in the registry, including org (e.g. acmecorp/peoplefinder-abac)
         *
         * @generated from field: string registry_image = 3;
         */
        this.registryImage = "";
        /**
         * tag of the policy image (e.g. 0.8.2 or latest)
         *
         * @generated from field: string registry_tag = 4;
         */
        this.registryTag = "";
        /**
         * digest of the policy image
         *
         * @generated from field: string registry_digest = 5;
         */
        this.registryDigest = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new DecisionPolicy().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new DecisionPolicy().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new DecisionPolicy().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(DecisionPolicy, a, b);
    }
}
exports.DecisionPolicy = DecisionPolicy;
DecisionPolicy.runtime = protobuf_1.proto3;
DecisionPolicy.typeName = "aserto.authorizer.v2.api.DecisionPolicy";
DecisionPolicy.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "message", T: policy_context_pb_js_1.PolicyContext },
    { no: 2, name: "registry_service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "registry_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "registry_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "registry_digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "policy_instance", kind: "message", T: policy_instance_pb_js_1.PolicyInstance },
]);
