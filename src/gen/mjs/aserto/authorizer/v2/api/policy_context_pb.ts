// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aserto/authorizer/v2/api/policy_context.proto (package aserto.authorizer.v2.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message aserto.authorizer.v2.api.PolicyContext
 */
export class PolicyContext extends Message<PolicyContext> {
  /**
   * policy path aka package name
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * list (1..N) of policy decisions (aka rules)
   *
   * @generated from field: repeated string decisions = 2;
   */
  decisions: string[] = [];

  constructor(data?: PartialMessage<PolicyContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.authorizer.v2.api.PolicyContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "decisions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PolicyContext {
    return new PolicyContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PolicyContext {
    return new PolicyContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PolicyContext {
    return new PolicyContext().fromJsonString(jsonString, options);
  }

  static equals(a: PolicyContext | PlainMessage<PolicyContext> | undefined, b: PolicyContext | PlainMessage<PolicyContext> | undefined): boolean {
    return proto3.util.equals(PolicyContext, a, b);
  }
}

