// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aserto/authorizer/v2/api/identity_context.proto (package aserto.authorizer.v2.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Identity types, describes the payload type of the identity field inside the IdentityContext message.
 *
 * @generated from enum aserto.authorizer.v2.api.IdentityType
 */
export enum IdentityType {
  /**
   * Unknown, value not set, requests will fail with identity type not set error.
   *
   * @generated from enum value: IDENTITY_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * None, no explicit identity context set, equals anonymous.
   *
   * @generated from enum value: IDENTITY_TYPE_NONE = 1;
   */
  NONE = 1,

  /**
   * Sub(ject), identity field contains an oAUTH subject.
   *
   * @generated from enum value: IDENTITY_TYPE_SUB = 2;
   */
  SUB = 2,

  /**
   * JWT, identity field contains a JWT access token.
   *
   * @generated from enum value: IDENTITY_TYPE_JWT = 3;
   */
  JWT = 3,

  /**
   * Manual, propagates thw identity field as-is, without validation, into the input object.
   *
   * @generated from enum value: IDENTITY_TYPE_MANUAL = 4;
   */
  MANUAL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(IdentityType)
proto3.util.setEnumType(IdentityType, "aserto.authorizer.v2.api.IdentityType", [
  { no: 0, name: "IDENTITY_TYPE_UNKNOWN" },
  { no: 1, name: "IDENTITY_TYPE_NONE" },
  { no: 2, name: "IDENTITY_TYPE_SUB" },
  { no: 3, name: "IDENTITY_TYPE_JWT" },
  { no: 4, name: "IDENTITY_TYPE_MANUAL" },
]);

/**
 * @generated from message aserto.authorizer.v2.api.IdentityContext
 */
export class IdentityContext extends Message<IdentityContext> {
  /**
   * @generated from field: string identity = 1;
   */
  identity = "";

  /**
   * @generated from field: aserto.authorizer.v2.api.IdentityType type = 2;
   */
  type = IdentityType.UNKNOWN;

  constructor(data?: PartialMessage<IdentityContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.authorizer.v2.api.IdentityContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(IdentityType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentityContext {
    return new IdentityContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentityContext {
    return new IdentityContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentityContext {
    return new IdentityContext().fromJsonString(jsonString, options);
  }

  static equals(a: IdentityContext | PlainMessage<IdentityContext> | undefined, b: IdentityContext | PlainMessage<IdentityContext> | undefined): boolean {
    return proto3.util.equals(IdentityContext, a, b);
  }
}

