// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file aserto/authorizer/v2/api/decision_logs.proto (package aserto.authorizer.v2.api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct, Timestamp } from "@bufbuild/protobuf";
import { IdentityContext } from "./identity_context_pb.js";
import { PolicyContext } from "./policy_context_pb.js";
import { PolicyInstance } from "./policy_instance_pb.js";

/**
 * represents a decision that an authorizer performed in the past
 *
 * @generated from message aserto.authorizer.v2.api.Decision
 */
export class Decision extends Message<Decision> {
  /**
   * unique id, replay a decision starting with this, also useful to de-dup
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * UTC time when the decision was made
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * Policy path used in decision
   *
   * @generated from field: string path = 3;
   */
  path = "";

  /**
   * info about user for whom the decision as made
   *
   * @generated from field: aserto.authorizer.v2.api.DecisionUser user = 4;
   */
  user?: DecisionUser;

  /**
   * info about policy used for the decision    
   *
   * @generated from field: aserto.authorizer.v2.api.DecisionPolicy policy = 5;
   */
  policy?: DecisionPolicy;

  /**
   * outcome of the decisions specified in the policy context
   *
   * @generated from field: map<string, bool> outcomes = 6;
   */
  outcomes: { [key: string]: boolean } = {};

  /**
   * the resource context used in a decision
   *
   * @generated from field: google.protobuf.Struct resource = 7;
   */
  resource?: Struct;

  /**
   * annotations that may be added to a decision    
   *
   * @generated from field: map<string, string> annotations = 8;
   */
  annotations: { [key: string]: string } = {};

  /**
   * id of the tenant that generated the decision
   *
   * @generated from field: optional string tenant_id = 9;
   */
  tenantId?: string;

  constructor(data?: PartialMessage<Decision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.authorizer.v2.api.Decision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user", kind: "message", T: DecisionUser },
    { no: 5, name: "policy", kind: "message", T: DecisionPolicy },
    { no: 6, name: "outcomes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 8 /* ScalarType.BOOL */} },
    { no: 7, name: "resource", kind: "message", T: Struct },
    { no: 8, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Decision {
    return new Decision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Decision {
    return new Decision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Decision {
    return new Decision().fromJsonString(jsonString, options);
  }

  static equals(a: Decision | PlainMessage<Decision> | undefined, b: Decision | PlainMessage<Decision> | undefined): boolean {
    return proto3.util.equals(Decision, a, b);
  }
}

/**
 * information about a user on behalf of whom a decision was made
 *
 * @generated from message aserto.authorizer.v2.api.DecisionUser
 */
export class DecisionUser extends Message<DecisionUser> {
  /**
   * identity context used in the decision
   *
   * @generated from field: aserto.authorizer.v2.api.IdentityContext context = 1;
   */
  context?: IdentityContext;

  /**
   * id of the user the identity resolved to    
   *
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * convinience human-readable identifier
   *
   * @generated from field: string email = 3;
   */
  email = "";

  constructor(data?: PartialMessage<DecisionUser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.authorizer.v2.api.DecisionUser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "message", T: IdentityContext },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecisionUser {
    return new DecisionUser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecisionUser {
    return new DecisionUser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecisionUser {
    return new DecisionUser().fromJsonString(jsonString, options);
  }

  static equals(a: DecisionUser | PlainMessage<DecisionUser> | undefined, b: DecisionUser | PlainMessage<DecisionUser> | undefined): boolean {
    return proto3.util.equals(DecisionUser, a, b);
  }
}

/**
 * information about a policy used in a decision
 *
 * @generated from message aserto.authorizer.v2.api.DecisionPolicy
 */
export class DecisionPolicy extends Message<DecisionPolicy> {
  /**
   * policy context used in the decision
   *
   * @generated from field: aserto.authorizer.v2.api.PolicyContext context = 1;
   */
  context?: PolicyContext;

  /**
   * registry service where policy was retrieved from (e.g. opcr.io)
   *
   * @generated from field: string registry_service = 2;
   */
  registryService = "";

  /**
   * image of the policy in the registry, including org (e.g. acmecorp/peoplefinder-abac)
   *
   * @generated from field: string registry_image = 3;
   */
  registryImage = "";

  /**
   * tag of the policy image (e.g. 0.8.2 or latest)
   *
   * @generated from field: string registry_tag = 4;
   */
  registryTag = "";

  /**
   * digest of the policy image 
   *
   * @generated from field: string registry_digest = 5;
   */
  registryDigest = "";

  /**
   * policy instance used in decision
   *
   * @generated from field: aserto.authorizer.v2.api.PolicyInstance policy_instance = 6;
   */
  policyInstance?: PolicyInstance;

  constructor(data?: PartialMessage<DecisionPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "aserto.authorizer.v2.api.DecisionPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "message", T: PolicyContext },
    { no: 2, name: "registry_service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "registry_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "registry_tag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "registry_digest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "policy_instance", kind: "message", T: PolicyInstance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DecisionPolicy {
    return new DecisionPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DecisionPolicy {
    return new DecisionPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DecisionPolicy {
    return new DecisionPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: DecisionPolicy | PlainMessage<DecisionPolicy> | undefined, b: DecisionPolicy | PlainMessage<DecisionPolicy> | undefined): boolean {
    return proto3.util.equals(DecisionPolicy, a, b);
  }
}

